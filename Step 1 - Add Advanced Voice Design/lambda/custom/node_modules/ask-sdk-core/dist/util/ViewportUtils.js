/*
 * Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the 'License').
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the 'license' file accompanying this file. This file is distributed
 * on an 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
var AskSdkUtils_1 = require("./AskSdkUtils");
exports.ViewportSizeGroupOrder = ['XSMALL', 'SMALL', 'MEDIUM', 'LARGE', 'XLARGE'];
exports.ViewportDpiGroupOrder = ['XLOW', 'LOW', 'MEDIUM', 'HIGH', 'XHIGH', 'XXHIGH'];
/**
 * return the {@link ViewportOrientation} of given width and height value
 * @param {number} width
 * @param {number} height
 * @return {ViewportOrientation}
 */
function getViewportOrientation(width, height) {
    return width > height
        ? 'LANDSCAPE'
        : width < height
            ? 'PORTRAIT'
            : 'EQUAL';
}
exports.getViewportOrientation = getViewportOrientation;
/**
 * return the {@link ViewportSizeGroup} of given size value
 * @param {number} size
 * @return {ViewportSizeGroup}
 */
function getViewportSizeGroup(size) {
    if (isBetween(size, 0, 600)) {
        return 'XSMALL';
    }
    else if (isBetween(size, 600, 960)) {
        return 'SMALL';
    }
    else if (isBetween(size, 960, 1280)) {
        return 'MEDIUM';
    }
    else if (isBetween(size, 1280, 1920)) {
        return 'LARGE';
    }
    else if (isBetween(size, 1920, Number.MAX_VALUE)) {
        return 'XLARGE';
    }
    throw AskSdkUtils_1.createAskSdkError('ViewportUtils.ts', "unknown size group value " + size);
}
exports.getViewportSizeGroup = getViewportSizeGroup;
/**
 * return the {@link ViewportDpiGroup} of given dpi value
 * @param {number} dpi
 * @return {ViewportDpiGroup}
 */
function getViewportDpiGroup(dpi) {
    if (isBetween(dpi, 0, 120)) {
        return 'XLOW';
    }
    else if (isBetween(dpi, 120, 160)) {
        return 'LOW';
    }
    else if (isBetween(dpi, 160, 240)) {
        return 'MEDIUM';
    }
    else if (isBetween(dpi, 240, 320)) {
        return 'HIGH';
    }
    else if (isBetween(dpi, 320, 480)) {
        return 'XHIGH';
    }
    else if (isBetween(dpi, 480, Number.MAX_VALUE)) {
        return 'XXHIGH';
    }
    throw AskSdkUtils_1.createAskSdkError('ViewportUtils.ts', "unknown dpi group value " + dpi);
}
exports.getViewportDpiGroup = getViewportDpiGroup;
/**
 * check if target number is within the range of [min, max);
 * @param {number} target
 * @param {number} min
 * @param {number} max
 * @return {boolean}
 */
function isBetween(target, min, max) {
    return target >= min && target < max;
}
/**
 * return the {@link ViewportProfile} of given request envelope
 * @param {RequestEnvelope} requestEnvelope
 * @return {ViewportProfile}
 */
function getViewportProfile(requestEnvelope) {
    var viewportState = requestEnvelope.context.Viewport;
    var currentPixelWidth = viewportState.currentPixelWidth;
    var currentPixelHeight = viewportState.currentPixelHeight;
    var dpi = viewportState.dpi;
    var shape = viewportState.shape;
    var viewportOrientation = getViewportOrientation(currentPixelWidth, currentPixelHeight);
    var viewportDpiGroup = getViewportDpiGroup(dpi);
    var pixelWidthSizeGroup = getViewportSizeGroup(currentPixelWidth);
    var pixelHeightSizeGroup = getViewportSizeGroup(currentPixelHeight);
    if (shape === 'ROUND'
        && viewportOrientation === 'EQUAL'
        && viewportDpiGroup === 'LOW'
        && pixelWidthSizeGroup === 'SMALL'
        && pixelHeightSizeGroup === 'SMALL') {
        return 'HUB-ROUND-SMALL';
    }
    if (shape === 'RECTANGLE'
        && viewportOrientation === 'LANDSCAPE'
        && viewportDpiGroup === 'LOW'
        && exports.ViewportSizeGroupOrder.indexOf(pixelWidthSizeGroup) <= exports.ViewportSizeGroupOrder.indexOf('MEDIUM')
        && exports.ViewportSizeGroupOrder.indexOf(pixelHeightSizeGroup) <= exports.ViewportSizeGroupOrder.indexOf('MEDIUM')) {
        return 'HUB-LANDSCAPE-MEDIUM';
    }
    if (shape === 'RECTANGLE'
        && viewportOrientation === 'LANDSCAPE'
        && viewportDpiGroup === 'LOW'
        && exports.ViewportSizeGroupOrder.indexOf(pixelWidthSizeGroup) >= exports.ViewportSizeGroupOrder.indexOf('LARGE')
        && exports.ViewportSizeGroupOrder.indexOf(pixelHeightSizeGroup) >= exports.ViewportSizeGroupOrder.indexOf('MEDIUM')) {
        return 'HUB-LANDSCAPE-LARGE';
    }
    if (shape === 'RECTANGLE'
        && viewportOrientation === 'LANDSCAPE'
        && viewportDpiGroup === 'MEDIUM'
        && exports.ViewportSizeGroupOrder.indexOf(pixelWidthSizeGroup) >= exports.ViewportSizeGroupOrder.indexOf('MEDIUM')
        && exports.ViewportSizeGroupOrder.indexOf(pixelHeightSizeGroup) >= exports.ViewportSizeGroupOrder.indexOf('MEDIUM')) {
        return 'MOBILE-LANDSCAPE-MEDIUM';
    }
    if (shape === 'RECTANGLE'
        && viewportOrientation === 'PORTRAIT'
        && viewportDpiGroup === 'MEDIUM'
        && exports.ViewportSizeGroupOrder.indexOf(pixelWidthSizeGroup) >= exports.ViewportSizeGroupOrder.indexOf('MEDIUM')
        && exports.ViewportSizeGroupOrder.indexOf(pixelHeightSizeGroup) >= exports.ViewportSizeGroupOrder.indexOf('MEDIUM')) {
        return 'MOBILE-PORTRAIT-MEDIUM';
    }
    if (shape === 'RECTANGLE'
        && viewportOrientation === 'LANDSCAPE'
        && viewportDpiGroup === 'MEDIUM'
        && exports.ViewportSizeGroupOrder.indexOf(pixelWidthSizeGroup) >= exports.ViewportSizeGroupOrder.indexOf('MEDIUM')
        && exports.ViewportSizeGroupOrder.indexOf(pixelHeightSizeGroup) >= exports.ViewportSizeGroupOrder.indexOf('SMALL')) {
        return 'MOBILE-LANDSCAPE-SMALL';
    }
    if (shape === 'RECTANGLE'
        && viewportOrientation === 'PORTRAIT'
        && viewportDpiGroup === 'MEDIUM'
        && exports.ViewportSizeGroupOrder.indexOf(pixelWidthSizeGroup) >= exports.ViewportSizeGroupOrder.indexOf('SMALL')
        && exports.ViewportSizeGroupOrder.indexOf(pixelHeightSizeGroup) >= exports.ViewportSizeGroupOrder.indexOf('MEDIUM')) {
        return 'MOBILE-PORTRAIT-SMALL';
    }
    if (shape === 'RECTANGLE'
        && viewportOrientation === 'LANDSCAPE'
        && exports.ViewportDpiGroupOrder.indexOf(viewportDpiGroup) >= exports.ViewportDpiGroupOrder.indexOf('HIGH')
        && exports.ViewportSizeGroupOrder.indexOf(pixelWidthSizeGroup) >= exports.ViewportSizeGroupOrder.indexOf('XLARGE')
        && exports.ViewportSizeGroupOrder.indexOf(pixelHeightSizeGroup) >= exports.ViewportSizeGroupOrder.indexOf('LARGE')) {
        return 'TV-LANDSCAPE-XLARGE';
    }
    if (shape === 'RECTANGLE'
        && viewportOrientation === 'PORTRAIT'
        && exports.ViewportDpiGroupOrder.indexOf(viewportDpiGroup) >= exports.ViewportDpiGroupOrder.indexOf('HIGH')
        && pixelWidthSizeGroup === 'MEDIUM'
        && pixelHeightSizeGroup === 'LARGE') {
        return 'TV-PORTRAIT-MEDIUM';
    }
    if (shape === 'RECTANGLE'
        && viewportOrientation === 'LANDSCAPE'
        && exports.ViewportDpiGroupOrder.indexOf(viewportDpiGroup) >= exports.ViewportDpiGroupOrder.indexOf('HIGH')
        && exports.ViewportSizeGroupOrder.indexOf(pixelWidthSizeGroup) >= exports.ViewportSizeGroupOrder.indexOf('LARGE')
        && pixelHeightSizeGroup === 'SMALL') {
        return 'TV-LANDSCAPE-MEDIUM';
    }
    return 'UNKNOWN-VIEWPORT-PROFILE';
}
exports.getViewportProfile = getViewportProfile;
//# sourceMappingURL=ViewportUtils.js.map